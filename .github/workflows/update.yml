# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
name: Get new version RemixIcon

concurrency:
    group: ${{ github.workflow }}-${{ github.ref }}
    cancel-in-progress: true

on: 
    schedule:
    - cron: "0 0 05,15,25 * *"
    workflow_dispatch:

jobs:
  get_data:
    runs-on: ubuntu-latest
    outputs:
      latest_version: ${{ steps.get_latest_version.outputs.latest_version }}
      tag: ${{ steps.previoustag.outputs.tag }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required due to the way Git works, without it this action won't be able to find any or the correct tags
      - name: 'Get Previous tag'
        id: previoustag
        uses: "WyriHaximus/github-action-get-previous-tag@v1"
        with:
          fallback: v1.0.0 # Optional fallback tag to use when no tag can be found
      - name: Get latest version
        id: get_latest_version
        run: |
          latest_version=$(curl -s https://api.github.com/repos/Remix-Design/RemixIcon/releases/latest | jq -r '.tag_name')
          echo "latest_version=$latest_version" >> $GITHUB_OUTPUT
          echo $latest_version

  build:
    needs: [get_data]
    if: needs.get_data.outputs.latest_version != needs.get_data.outputs.tag
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # Note: This workflow uses the latest stable version of the Dart SDK.
      # You can specify other versions if desired, see documentation here:
      # https://github.com/dart-lang/setup-dart/blob/main/README.md
      # - uses: dart-lang/setup-dart@v1
      - uses: dart-lang/setup-dart@9a04e6d73cca37bd455e0608d7e5092f881fd603

      - name: üê¶ Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: 3.19.6
          channel: stable
          cache: true
          cache-key: flutter-:os:-:channel:-:version:-:arch:-:hash:-${{ hashFiles('**/pubspec.lock') }}

      - name: Install dependencies
        run: flutter pub get
          
      - name: Generate
        run: dart run tools/generate.dart

      # Uncomment this step to verify the use of 'dart format' on each commit.
      # - name: Verify formatting
      #   run: dart format --output=none --set-exit-if-changed .

      # Consider passing '--fatal-infos' for slightly stricter analysis.
      - name: Analyze project source
        run: flutter analyze

      # Your project will need to have tests in test/ and a dependency on
      # package:test for this step to succeed. Note that Flutter projects will
      # want to change this to 'flutter test'.
      - name: Run tests
        run: flutter test
    
      - uses: EndBug/add-and-commit@v9
        with:
              message: '${{ needs.get_data.outputs.latest_version }}'
              committer_name: GitHub Actions
              committer_email: actions@github.com
              new_branch: release/${{ needs.get_data.outputs.latest_version }}
              
      - name: Change version in pubspec.yaml
        run: |
          sed -i "s|version: .*|version: ${{ needs.get_data.outputs.latest_version }}|" pubspec.yaml

      - name: Create pull request
        run: gh pr create -B main -H release/${{ needs.get_data.outputs.latest_version }} --title '${{ needs.get_data.outputs.latest_version }}' --body 'Created by Github action'
        env:
              GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
